# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'New_Insights.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os


class AnalyseTab(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("Form")
        self.resize(584, 408)
        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setContentsMargins(20, 20, 20, 20)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.graphicsView = QtWidgets.QGraphicsView(self.frame)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout_2.addWidget(self.graphicsView, 2, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 1, 0, 1, 1)
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.frame)
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.gridLayout_2.addWidget(self.graphicsView_2, 2, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 3, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 3, 1, 1, 1)
        self.graphicsView_4 = QtWidgets.QGraphicsView(self.frame)
        self.graphicsView_4.setObjectName("graphicsView_4")
        self.gridLayout_2.addWidget(self.graphicsView_4, 4, 0, 1, 1)
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.frame)
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.gridLayout_2.addWidget(self.graphicsView_3, 4, 1, 1, 1)
        self.verticalLayout.addWidget(self.frame)

        QtCore.QMetaObject.connectSlotsByName(self)

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "TextLabel"))
        self.label_2.setText(_translate("Form", "TextLabel"))
        self.label_3.setText(_translate("Form", "TextLabel"))
        self.label_4.setText(_translate("Form", "TextLabel"))

    def clicked(self):
        # if not os.path.exists('../data/applications.csv'):
        #     print("No data available. Please import data first.")
        # Get matplotlib Plots and save as jg
        data = pd.read_csv('../data/applications.csv', encoding='utf-8', sep=';')

        #if len(data)
        #TODO: explode abhänig von parametern machen
        #Farben später einbauen

        #colors1 = ['#ffcc99', '#ff9999', '#66b3ff', '#99ff99']
        #colors2 = ['#ffcc99', '#66b3ff', '#99ff99', '#ff9999']
        groesse = 3
        breite = 5
        # pie chart to see how many applications have been accepted, rejected or are still pending
        status = data['status']
        plt.figure()
        csfont = {'fontname': 'Arial'}
        print(status.value_counts())
        status.value_counts().plot(kind='pie', figsize=(8, 4), autopct='%1.0f%%', label='')
        plt.title('All-Time Overview', **csfont)
        plt.savefig('../data/plot1.png', bbox_inches='tight')

        # Table for resume numeration
        def get_pdf_name(path):
            return path.split('/')[-1].split('.')[0]

        # Table for resume numeration
        count_resumes = data['resumePdf'].unique()
        pdf_name = np.array([])

        # drop all nan values from the resumePdf column
        data1 = data.dropna(subset=['resumePdf'])
        # replace the path with the pdf name
        data1['resumePdf'] = data1['resumePdf'].apply(get_pdf_name)

        sbchart1 = data1.groupby('resumePdf')['status'].value_counts()
        # calcute the percentage of each status for each resume
        sbchart1 = sbchart1.groupby(level=0, group_keys=False).apply(lambda x: 100 * x / float(x.sum()))
        # create stacked bar chart
        sbchart1.unstack().plot(kind='bar', stacked=True, rot=0, title='Comparison of different resumes',
                                xlabel='').legend(loc='upper right', bbox_to_anchor=(1.14, 1.15))
        plt.savefig('../data/plot2.png', bbox_inches='tight')

        # compare the status distribution from cover letter and without cover letter
        sbchart2 = data.groupby('coverAdded')['status'].value_counts()
        # calcute the percentage of each status for cover letter vs no cover letter
        sbchart2 = sbchart2.groupby(level=0, group_keys=False).apply(lambda x: 100 * x / float(x.sum()))
        # create stacked bar chart
        sbchart2.unstack().plot(kind='bar', stacked=True, title="Cover Letter VS No Cover Letter",
                                rot=0, figsize=(breite, 3),xlabel='').legend(loc='upper right', bbox_to_anchor=(1.2, 1.14))
        plt.savefig('../data/plot3.png', bbox_inches='tight')

        # status of the last 10 applications
        lastTenAp = data.sort_values(by='date', ascending=True)
        lastTenAp = lastTenAp.head(10)
        lastTenAp = lastTenAp['status']
        plt.figure()
        csfont = {'fontname': 'Arial'}
        lastTenAp.value_counts().plot(kind='bar', rot=0, figsize=(6, 3.5))
        plt.title('Status of the last 10 applications', **csfont)
        plt.savefig('../data/plot4.png', bbox_inches='tight')

        # Get the plots and show them in the Graphic Widgets
        #self.graphicsView.scene().clear()
        #self.graphicsView.scene().addPixmap(QtGui.QPixmap('../data/plot1.png'))
        #self.graphicsView.show()

        self.label.setPixmap(QtGui.QPixmap('../data/plot1.png'))
        self.label.show()

        #self.graphicsView_2.scene().clear()
        #self.graphicsView_2.scene().addPixmap(QtGui.QPixmap('../data/plot2.png'))
        #self.graphicsView_2.show()

        self.label_2.setPixmap(QtGui.QPixmap('../data/plot2.png'))
        self.label_2.show()
        #self.graphicsView_3.scene().clear()
        #self.graphicsView_3.scene().addPixmap(QtGui.QPixmap('../data/plot3.png'))
        #self.graphicsView_3.show()

        self.label_3.setPixmap(QtGui.QPixmap('../data/plot3.png'))
        self.label_3.show()

        #self.graphicsView_4.scene().clear()
        #self.graphicsView_4.scene().addPixmap(QtGui.QPixmap('../data/plot4.png'))
        #self.graphicsView_4.show()

        self.label_4.setPixmap(QtGui.QPixmap('../data/plot4.png'))
        self.label_4.show()
